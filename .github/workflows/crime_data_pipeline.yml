name: Crime Data Pipeline CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  dev-environment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest tests/ --cov=src
    
    - name: Run dev pipeline
      env:
        ENVIRONMENT: dev
      run: |
        python -m src.main
    
    - name: Create deployment artifacts
      run: |
        mkdir -p artifacts
        cp -r src artifacts/
        cp requirements.txt artifacts/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-artifacts
        path: artifacts/
    
    - name: Request pre-prod promotion
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "Request to promote to pre-prod environment",
            body: "Dev environment pipeline completed successfully. Please review and approve promotion to pre-prod environment.",
            labels: ["promotion-request", "pre-prod"]
          })

  pre-prod-environment:
    needs: dev-environment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.labels.*.name, 'pre-prod')
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: pipeline-artifacts
        path: artifacts/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r artifacts/requirements.txt
    
    - name: Install Databricks CLI
      run: pip install databricks-cli
    
    - name: Configure Databricks CLI
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        databricks configure --token <<EOF
        $DATABRICKS_HOST
        $DATABRICKS_TOKEN
        EOF
    
    - name: Trigger Databricks Job (pre-prod)
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        DATABRICKS_CLUSTER_ID: ${{ secrets.DATABRICKS_CLUSTER_ID }}
        ENVIRONMENT: pre-prod
      run: |
        # Replace JOB_ID with your actual Databricks job ID for pre-prod
        databricks jobs run-now --job-id ${{ secrets.DATABRICKS_PREPROD_JOB_ID }} --notebook-params '{"ENVIRONMENT": "pre-prod"}'
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: preprod-logs
        path: logs/
    
    - name: Request prod promotion
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "Request to promote to prod environment",
            body: "Pre-prod environment pipeline completed successfully. Please review and approve promotion to prod environment.",
            labels: ["promotion-request", "prod"]
          })

  prod-environment:
    needs: pre-prod-environment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.labels.*.name, 'prod')
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: pipeline-artifacts
        path: artifacts/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r artifacts/requirements.txt
    
    - name: Install Databricks CLI
      run: pip install databricks-cli
    
    - name: Configure Databricks CLI
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        databricks configure --token <<EOF
        $DATABRICKS_HOST
        $DATABRICKS_TOKEN
        EOF
    
    - name: Trigger Databricks Job (prod)
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        DATABRICKS_CLUSTER_ID: ${{ secrets.DATABRICKS_CLUSTER_ID }}
        ENVIRONMENT: prod
      run: |
        # Replace JOB_ID with your actual Databricks job ID for prod
        databricks jobs run-now --job-id ${{ secrets.DATABRICKS_PROD_JOB_ID }} --notebook-params '{"ENVIRONMENT": "prod"}'
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: prod-logs
        path: logs/ 